{"version":3,"sources":["components/App.js","hooks/useGameState.js","reportWebVitals.js","index.js"],"names":["App","STARTING_TIME","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","inputRef","useRef","handleChange","e","value","target","startGame","current","disabled","focus","endGame","countWords","split","filter","word","trim","length","useEffect","setTimeout","time","useGameState","className","ref","onChange","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LA0BeA,MAtBf,WACC,MCHc,WAA0C,IAClDC,EADiD,uDAAJ,GAGnD,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,mBAASD,GAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EAAWC,iBAAO,MAYxB,SAASC,EAAaC,GACrB,IAAQC,EAAUD,EAAEE,OAAZD,MACRX,EAAQW,GAGT,SAASE,IACRT,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRM,EAAa,GACbC,EAASO,QAAQC,UAAW,EAC5BR,EAASO,QAAQE,QAGlB,SAASC,IACRb,GAAiB,GACjBE,EAAaY,KAGd,SAASA,IAER,OADiBnB,EAAKoB,MAAM,KAAKC,QAAO,SAACC,GAAD,MAA0B,KAAhBA,EAAKC,UAAeC,OAIvE,OAlCAC,qBAAU,WACTC,YAAW,WACNxB,EAAgB,GAAKE,EACxBD,GAAiB,SAACwB,GAAD,OAAUA,EAAO,KAElCT,MAEC,OACD,CAAChB,EAAeE,IA0BZ,CAAEI,WAAUR,OAAMU,eAAcN,gBAAeF,gBAAeY,YAAWR,aDxC/EsB,CAAa,GADNpB,EAAR,EAAQA,SAAUR,EAAlB,EAAkBA,KAAMU,EAAxB,EAAwBA,aAAcN,EAAtC,EAAsCA,cAAeF,EAArD,EAAqDA,cAAeY,EAApE,EAAoEA,UAAWR,EAA/E,EAA+EA,UAG/E,OACC,sBAAKuB,UAAU,MAAf,UACC,mDACA,0BACCC,IAAKtB,EACLI,MAAOZ,EACP+B,SAAUrB,EACVM,UAAWZ,IAEZ,kDAAqBF,KACrB,wBAAQ8B,QAASlB,EAAWE,SAAUZ,EAAtC,mBAGA,8CAAiBE,SETL2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,K","file":"static/js/main.cc5997cf.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\nimport useGameState from \"../hooks/useGameState\"\nimport \"../styles/App.scss\"\n\nfunction App() {\n\tconst { inputRef, text, handleChange, isTimeRunning, timeRemaining, startGame, wordCount } =\n\t\tuseGameState(3)\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Speed Typing Game</h1>\n\t\t\t<textarea\n\t\t\t\tref={inputRef}\n\t\t\t\tvalue={text}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tdisabled={!isTimeRunning}\n\t\t\t/>\n\t\t\t<h4>Time remaining: {timeRemaining}</h4>\n\t\t\t<button onClick={startGame} disabled={isTimeRunning}>\n\t\t\t\tStart\n\t\t\t</button>\n\t\t\t<h1>Word count: {wordCount}</h1>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { useState, useEffect, useRef } from \"react\"\n\nexport default function useGameState(startingTime = 10) {\n\tconst STARTING_TIME = startingTime\n\n\tconst [text, setText] = useState(\"\")\n\tconst [timeRemaining, setTimeRemaining] = useState(STARTING_TIME)\n\tconst [isTimeRunning, setIsTimeRunning] = useState(false)\n\tconst [wordCount, setWordCount] = useState(0)\n\n\tconst inputRef = useRef(null)\n\n\tuseEffect(() => {\n\t\tsetTimeout(() => {\n\t\t\tif (timeRemaining > 0 && isTimeRunning) {\n\t\t\t\tsetTimeRemaining((time) => time - 1)\n\t\t\t} else {\n\t\t\t\tendGame()\n\t\t\t}\n\t\t}, 1000)\n\t}, [timeRemaining, isTimeRunning])\n\n\tfunction handleChange(e) {\n\t\tconst { value } = e.target\n\t\tsetText(value)\n\t}\n\n\tfunction startGame() {\n\t\tsetIsTimeRunning(true)\n\t\tsetTimeRemaining(STARTING_TIME)\n\t\tsetText(\"\")\n\t\tsetWordCount(0)\n\t\tinputRef.current.disabled = false\n\t\tinputRef.current.focus()\n\t}\n\n\tfunction endGame() {\n\t\tsetIsTimeRunning(false)\n\t\tsetWordCount(countWords())\n\t}\n\n\tfunction countWords() {\n\t\tconst numWords = text.split(\" \").filter((word) => word.trim() !== \"\").length\n\t\treturn numWords\n\t}\n\n\treturn { inputRef, text, handleChange, isTimeRunning, timeRemaining, startGame, wordCount }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./components/App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}